path<-.libPaths()
library("MALDIquantForeign", lib.loc=path)
library("MALDIquant", lib.loc=path)
library("ggplot2", lib.loc=path)
library("ape", lib.loc=path)
library("dendextend", lib.loc=path)


path<-"C:/Users/chase/Desktop/Supplementary_Data_and_Code"


setwd(paste0(path,"/","DiversityPlate-172"))



spectraImport<-importMzMl(path="ProteinData")




####Change MetaData
for (i in 1:length(spectraImport)){
  
  if(is.na(strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1]   )){
    spectraImport[[i]]@metaData$Taxonomy<-"Value Not Provided"
  } else{spectraImport[[i]]@metaData$Taxonomy<-strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1]
  }
  if(is.na( strsplit((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1])," ")[[1]][1]  )){
    spectraImport[[i]]@metaData$Genus<-"Value Not Provided"
  } else{ spectraImport[[i]]@metaData$Genus<-strsplit((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1])," ")[[1]][1]
  }
  if(is.na(  strsplit((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1])," ")[[1]][2] )){
    spectraImport[[i]]@metaData$Species<-"Value Not Provided"
  } else{ spectraImport[[i]]@metaData$Species<-strsplit((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][2]),"\\.")[[1]][1])," ")[[1]][2]
  }
  if(is.na(  strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1] )){
    spectraImport[[i]]@metaData$Strain<-"Value Not Provided"
  } else{spectraImport[[i]]@metaData$Strain<-strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1]
  }
  if(is.na( strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][2]  )){
    spectraImport[[i]]@metaData$Media<-"Value Not Provided"
  } else{  spectraImport[[i]]@metaData$Media<-strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][2]
  }
  if(is.na( strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][3]  )){
    spectraImport[[i]]@metaData$Replicate<-"Value Not Provided"
  } else{  spectraImport[[i]]@metaData$Replicate<- strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][3]
  }
  if(is.na(  paste((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1]),strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][[2]]) )){
    spectraImport[[i]]@metaData$StrainMedia<- "Value Not Provided"
  } else{ spectraImport[[i]]@metaData$StrainMedia<-paste((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1]),strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][[2]])
  }
  if(is.na( paste((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1]),strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][[2]],strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][3])  )){
    spectraImport[[i]]@metaData$StrainMediaReplicate<- "Value Not Provided"
  } else{spectraImport[[i]]@metaData$StrainMediaReplicate<-paste((strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][1]),strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][[2]],strsplit((strsplit((strsplit((strsplit(spectraImport[[i]]@metaData$file,"Desktop\\\\")[[1]][2]),"\\\\")[[1]][4]),"@")[[1]][1]),"_")[[1]][3])
  }
}



#####Find the matrix Sample and isolate
#labs <- sapply(spectraImport, function(x)metaData(x)$StrainMedia)
#matrixIndex<-grep("Matrix",labs,ignore.case=TRUE)
#mat<-spectraImport[matrixIndex]
#spectraImport<-spectraImport[-matrixIndex]

##### Separate protein and small molecule data
proteinSpectra<-NULL
smallSpectra<-NULL
for (i in 1:length(spectraImport))
{
  if(max(spectraImport[[i]]@mass)>10000)
  {
    proteinSpectra<-c(proteinSpectra,spectraImport[[i]])
  }
  else 
  { 
    smallSpectra<-c(smallSpectra,spectraImport[[i]])
  }
}

#####Average Spectra Based on Sample ID
#labs <- sapply(smallSpectra, function(x)metaData(x)$Strain)
#smallAveragedSpectra <-  averageMassSpectra(smallSpectra, labels=labs)
labs <- sapply(proteinSpectra, function(x)metaData(x)$Strain)

proteinAveragedSpectra <-  averageMassSpectra(proteinSpectra, labels=labs)


###
# Protein Spectra Preprocessing, Peak Picking, and Peak Binning
###
proteinAveragedSpectra <- transformIntensity(proteinAveragedSpectra,method="sqrt")
proteinAveragedSpectra <- smoothIntensity(proteinAveragedSpectra, method="SavitzkyGolay",halfWindowSize=20)
proteinAveragedSpectra<- removeBaseline(proteinAveragedSpectra, method="TopHat")
proteinPeaks<-detectPeaks(proteinAveragedSpectra, method="MAD", halfWindowSize=20, SNR=12.5)





proteinPeaks<-binPeaks(proteinPeaks,tolerance=.02)

proteinPeaks<-trim(proteinPeaks,c(3000,15000))



###Organize names for data frame
#smallSamples <- factor(sapply(smallAveragedSpectra, function(x)metaData(x)$Strain))
temp<-NULL
for (i in 1:length(proteinPeaks)){
  temp<-c(temp,proteinPeaks[[i]]@metaData$Strain)
}

proteinSamples<-factor(temp)

###
# Convert Small Molecule Peak lists into a useable data frame (matrix)
###
#SmallMoleculeTable <- intensityMatrix(smallPeaks)
#rownames(SmallMoleculeMatrix) <- paste(smallSamples)


###
# Convert Protein Peak lists into a useable data frame (matrix)
###
proteinMatrix <- intensityMatrix(proteinPeaks)
rownames(proteinMatrix) <- paste(proteinSamples)



###
# Write to .csv file so that later data analysis can be run without running R if you close out of KNIME
###
#write.csv(SmallMoleculeMatrix,"MALDIquant_SmallMolecule_PeakList.csv")



require("FactoMineR")





mydata<-proteinMatrix
mydata[is.na(mydata)] <- 0
c<-PCA(mydata)
a<-c$ind$coord
a<-as.data.frame(a)
ggplot(a,aes(Dim.1,Dim.2,label=rownames(a)))+geom_label()



cosineD <- function(x){
  as.dist(1 - x%*%t(x)/(sqrt(rowSums(x^2) %*% t(rowSums(x^2))))) 
}


#This ccreates a distance matrix from the peak list created in the protein processing section
d <- cosineD(mydata)
# Hierarchical clustering using Ward's method
res.hc <- hclust(d)
# Plot the obtained dendrogram
plot(res.hc, cex = 2, hang = -1,main="Protein-Data, Cosine Distance")


cPhylo1 <- read.tree(file = "Tree.newick")
d2<-root(cPhylo1,1,resolve.root = TRUE)
dend1 <- chronos(d2)

d1 <- as.dendrogram(dend1)

a<-as.dendrogram(res.hc)




d<-dendlist(d1,a)


x <- d %>% untangle(method = "step2side") 
x %>% plot(main = paste("entanglement =", round(entanglement(x), 2)),common_subtrees_color_branches = TRUE)



#This ccreates a distance matrix from the peak list created in the protein processing section
d <- dist(mydata, method = "euclidean")
# Hierarchical clustering using Ward's method
res.hc <- hclust(d)
# Plot the obtained dendrogram
plot(res.hc, cex = 2, hang = -1,main="Protein-Data, Euclidean Distance")
